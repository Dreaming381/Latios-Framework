//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Physics/Utilities/Physics.RaycastDisplatch.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Mathematics;

namespace Latios.Psyshock
{
    public static partial class Physics
    {
        public static bool Raycast(float3 start, float3 end, in Collider collider, in RigidTransform colliderTransform, out RaycastResult result)
        {
            return Raycast(new Ray(start, end), in collider, in colliderTransform, out result);
        }

        public static bool Raycast(Ray ray, in Collider collider, in RigidTransform colliderTransform, out RaycastResult result)
        {
            switch (collider.type)
            {
                case ColliderType.Sphere:
                {
                    SphereCollider col = collider;
                    return Raycast(ray, in collider.m_sphere, in colliderTransform, out result);
                }
                case ColliderType.Capsule:
                {
                    CapsuleCollider col = collider;
                    return Raycast(ray, in collider.m_capsule, in colliderTransform, out result);
                }
                case ColliderType.Box:
                {
                    BoxCollider col = collider;
                    return Raycast(ray, in collider.m_box, in colliderTransform, out result);
                }
                case ColliderType.Triangle:
                {
                    TriangleCollider col = collider;
                    return Raycast(ray, in collider.m_triangle, in colliderTransform, out result);
                }
                case ColliderType.Convex:
                {
                    ConvexCollider col = collider;
                    return Raycast(ray, in collider.m_convex, in colliderTransform, out result);
                }
                case ColliderType.Compound:
                {
                    CompoundCollider col = collider;
                    return Raycast(ray, in collider.m_compound, in colliderTransform, out result);
                }
                default:
                    result = default;
                    return false;
            }
        }
    }
}

