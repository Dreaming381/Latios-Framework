using System;
using System.Collections.Generic;
using Latios;
using Latios.Authoring;
using Latios.Compatibility.UnityNetCode;
using Unity.Entities;

[UnityEngine.Scripting.Preserve]
public class LatiosBakingBootstrap : ICustomBakingBootstrap
{
    public void InitializeBakingForAllWorlds(ref CustomBakingBootstrapContext context)
    {
        Latios.Psyshock.Authoring.PsyshockBakingBootstrap.InstallUnityColliderBakers(ref context);
        Latios.Kinemation.Authoring.KinemationBakingBootstrap.InstallKinemationBakersAndSystems(ref context);
        Latios.Kinemation.Authoring.KinemationBakingBootstrap.InstallMecanimBakersAndSystems(ref context);
    }
}

[UnityEngine.Scripting.Preserve]
public class LatiosEditorBootstrap : ICustomEditorBootstrap
{
    public World InitializeOrModify(World defaultEditorWorld)
    {
        var world = new LatiosWorld(defaultEditorWorld.Name);

        var systems = DefaultWorldInitialization.GetAllSystemTypeIndices(WorldSystemFilterFlags.Default, true);
        BootstrapTools.InjectSystems(systems, world, world.simulationSystemGroup);

        Latios.Kinemation.KinemationBootstrap.InstallKinemation(world);
        Latios.Calligraphics.CalligraphicsBootstrap.InstallCalligraphics(world);

        return world;
    }
}

[UnityEngine.Scripting.Preserve]
public class NetCodeLocalLatiosBootrap : ICustomLocalWorldBootstrap
{
    public World Initialize(string defaultWorldName, WorldFlags worldFlags, WorldSystemFilterFlags worldSystemFilterFlags)
    {
        var world = new LatiosWorld(defaultWorldName, worldFlags);

        var systems = DefaultWorldInitialization.GetAllSystemTypeIndices(worldSystemFilterFlags);
        BootstrapTools.InjectSystems(systems, world, world.simulationSystemGroup);

        Latios.Myri.MyriBootstrap.InstallMyri(world);
        Latios.Kinemation.KinemationBootstrap.InstallKinemation(world);
        Latios.Kinemation.KinemationBootstrap.InstallMecanimFeatures(world);
        Latios.Calligraphics.CalligraphicsBootstrap.InstallCalligraphics(world);
        Latios.Calligraphics.CalligraphicsBootstrap.InstallCalligraphicsAnimations(world);

        world.initializationSystemGroup.SortSystems();
        world.simulationSystemGroup.SortSystems();
        world.presentationSystemGroup.SortSystems();

        return world;
    }
}

[UnityEngine.Scripting.Preserve]
public class NetCodeClientLatiosBootrap : ICustomClientWorldBootstrap
{
    public World Initialize(string defaultWorldName, WorldFlags worldFlags, WorldSystemFilterFlags worldSystemFilterFlags)
    {
        var world = new LatiosWorld(defaultWorldName, worldFlags, LatiosWorld.WorldRole.Client);

        var systems = DefaultWorldInitialization.GetAllSystemTypeIndices(worldSystemFilterFlags);
        BootstrapTools.InjectSystems(systems, world, world.simulationSystemGroup);

        Latios.Myri.MyriBootstrap.InstallMyri(world);
        Latios.Kinemation.KinemationBootstrap.InstallKinemation(world);
        Latios.Kinemation.KinemationBootstrap.InstallMecanimFeatures(world);
        Latios.Calligraphics.CalligraphicsBootstrap.InstallCalligraphics(world);
        Latios.Calligraphics.CalligraphicsBootstrap.InstallCalligraphicsAnimations(world);

        world.initializationSystemGroup.SortSystems();
        world.simulationSystemGroup.SortSystems();
        world.presentationSystemGroup.SortSystems();

        return world;
    }
}

[UnityEngine.Scripting.Preserve]
public class NetCodeServerLatiosBootrap : ICustomServerWorldBootstrap
{
    public World Initialize(string defaultWorldName, WorldFlags worldFlags, WorldSystemFilterFlags worldSystemFilterFlags)
    {
        var world = new LatiosWorld(defaultWorldName, worldFlags, LatiosWorld.WorldRole.Server);

        var systems = DefaultWorldInitialization.GetAllSystemTypeIndices(worldSystemFilterFlags);
        BootstrapTools.InjectSystems(systems, world, world.simulationSystemGroup);

        world.initializationSystemGroup.SortSystems();
        world.simulationSystemGroup.SortSystems();

        return world;
    }
}

[UnityEngine.Scripting.Preserve]
public class NetCodeThinClientLatiosBootrap : ICustomThinClientWorldBootstrap
{
    public World Initialize(string defaultWorldName, WorldFlags worldFlags, WorldSystemFilterFlags worldSystemFilterFlags)
    {
        var world = new LatiosWorld(defaultWorldName, worldFlags, LatiosWorld.WorldRole.ThinClient);

        var systems = DefaultWorldInitialization.GetAllSystemTypeIndices(worldSystemFilterFlags);
        BootstrapTools.InjectSystems(systems, world, world.simulationSystemGroup);

        world.initializationSystemGroup.SortSystems();
        world.simulationSystemGroup.SortSystems();

        return world;
    }
}

[UnityEngine.Scripting.Preserve]
public class NetCodeLatiosBootstrap : LatiosClientServerBootstrap
{
}
