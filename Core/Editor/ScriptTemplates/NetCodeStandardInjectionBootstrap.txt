using System;
using System.Collections.Generic;
using Latios;
using Latios.Authoring;
using Latios.Compatibility.UnityNetCode;
using Unity.Entities;

[UnityEngine.Scripting.Preserve]
public class LatiosConversionBootstrap : ICustomConversionBootstrap
{
    public bool InitializeConversion(World conversionWorldWithGroupsAndMappingSystems, CustomConversionSettings settings, ref List<Type> filteredSystems)
    {
        var defaultGroup = conversionWorldWithGroupsAndMappingSystems.GetExistingSystem<GameObjectConversionGroup>();
        BootstrapTools.InjectSystems(filteredSystems, conversionWorldWithGroupsAndMappingSystems, defaultGroup);

        Latios.Psyshock.Authoring.PsyshockConversionBootstrap.InstallLegacyColliderConversion(conversionWorldWithGroupsAndMappingSystems);
        Latios.Kinemation.Authoring.KinemationConversionBootstrap.InstallKinemationConversion(conversionWorldWithGroupsAndMappingSystems);
        return true;
    }
}

[UnityEngine.Scripting.Preserve]
public class NetCodeLatiosBootstrap : LatiosClientServerBootstrapBase
{
    public override bool Initialize(string defaultWorldName)
    {
        AutoConnectPort = 7979;  // Enable auto connect
        return base.Initialize(defaultWorldName);
    }

    public override World CreateCustomClientWorld(string worldName)
    {
        var world = new LatiosWorld(worldName, WorldFlags.Game, LatiosWorld.WorldRole.Client);

        BootstrapTools.InjectSystems(ClientSystems, world, world.simulationSystemGroup, ClientGroupRemap);

        CoreBootstrap.InstallImprovedTransforms(world);
        Latios.Myri.MyriBootstrap.InstallMyri(world);
        Latios.Kinemation.KinemationBootstrap.InstallKinemation(world);

        world.initializationSystemGroup.SortSystems();
        world.simulationSystemGroup.SortSystems();
        world.presentationSystemGroup.SortSystems();

        return world;
    }

    public override World CreateCustomServerWorld(string worldName)
    {
        var world = new LatiosWorld(worldName, WorldFlags.Game, LatiosWorld.WorldRole.Server);

        BootstrapTools.InjectSystems(ServerSystems, world, world.simulationSystemGroup, ServerGroupRemap);

        CoreBootstrap.InstallImprovedTransforms(world);

        world.initializationSystemGroup.SortSystems();
        world.simulationSystemGroup.SortSystems();

        return world;
    }
}
