// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel BatchSkinningFullLds512

// We disable this warning because it assumes that we only get 16 VGPRs per thread with a threadgroup size of 1024.
// Desktop and console support 32 per thread with good occupancy. This shader uses 26-28 on GCN.
#pragma warning(disable: 4714)

struct BoneWeight
{
    float weight;
    uint packed;
};

struct Vertex
{
    float3 position;
    float3 normal;
    float3 tangent;
};

//uniform StructuredBuffer<BoneWeight> _boneWeights;
uniform ByteAddressBuffer _boneWeights;
uniform StructuredBuffer<Vertex> _srcVertices;
uniform StructuredBuffer<float3x4> _bindPoses;
uniform StructuredBuffer<float3x4> _skeletonMats;
uniform ByteAddressBuffer _boneOffsets;

// Stride of uint4
uniform ByteAddressBuffer _metaBuffer;

uniform RWStructuredBuffer<Vertex> _dstVertices : register(u1);
uniform RWStructuredBuffer <float3x4> _dstMats : register(u2);

#define THREAD_GROUP_SIZE 512
#define THREAD_GROUP_DIVISOR 1024/THREAD_GROUP_SIZE

groupshared float3x4 gs_skeletonMats[682];

uint _startOffset;

float3x4 mul3x4(float3x4 a, float3x4 b)
{
    float4x4 x = 0.;
    x._m00 = a._m00;
    x._m10 = a._m10;
    x._m20 = a._m20;
    x._m30 = 0.;
    x._m01 = a._m01;
    x._m11 = a._m11;
    x._m21 = a._m21;
    x._m31 = 0.;
    x._m02 = a._m02;
    x._m12 = a._m12;
    x._m22 = a._m22;
    x._m32 = 0.;
    x._m03 = a._m03;
    x._m13 = a._m13;
    x._m23 = a._m23;
    x._m33 = 1.;

    float4x4 y = 0.;
    y._m00 = b._m00;
    y._m10 = b._m10;
    y._m20 = b._m20;
    y._m30 = 0.;
    y._m01 = b._m01;
    y._m11 = b._m11;
    y._m21 = b._m21;
    y._m31 = 0.;
    y._m02 = b._m02;
    y._m12 = b._m12;
    y._m22 = b._m22;
    y._m32 = 0.;
    y._m03 = b._m03;
    y._m13 = b._m13;
    y._m23 = b._m23;
    y._m33 = 1.;

    float4x4 r = mul(x, y);

    float3x4 result = 0.;
    result._m00 = r._m00;
    result._m10 = r._m10;
    result._m20 = r._m20;

    result._m01 = r._m01;
    result._m11 = r._m11;
    result._m21 = r._m21;

    result._m02 = r._m02;
    result._m12 = r._m12;
    result._m22 = r._m22;

    result._m03 = r._m03;
    result._m13 = r._m13;
    result._m23 = r._m23;

    return result;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void BatchSkinningFullLds512(uint threadId : SV_GroupIndex, uint3 groupIds : SV_GroupID)
{
    uint groupId = groupIds.x;
    uint4 skeletonMeta = _metaBuffer.Load4((groupId + _startOffset) * 16 );

    uint skeletonIndex = skeletonMeta.x;
    uint skeletonCount = skeletonMeta.y;

    for (uint i = threadId; i < skeletonCount; i += THREAD_GROUP_SIZE)
    {
        gs_skeletonMats[i] = _skeletonMats[i + skeletonIndex];
    }
    
    GroupMemoryBarrierWithGroupSync();

    const uint meshStart = skeletonMeta.z;
    const uint meshCount = skeletonMeta.w;

    //float3x4 debug = 0;
    //debug._m00 = 1;
    //debug._m11 = 1;
    //debug._m22 = 1;

    for (uint meshIndex = 0; meshIndex < meshCount; meshIndex++)
    {
        const uint4 meshMeta = _metaBuffer.Load4((meshStart + meshIndex * 2) * 16);
        const uint meshOperation = meshMeta.x & 0xffff;
        const uint meshBonesCount = meshMeta.x >> 16;
        const uint meshBindposesStart = meshMeta.y;
        const uint meshBoneOffsetsStart = meshMeta.z;
        const uint matsDst = meshMeta.w;

        const uint4 meshMeta2 = _metaBuffer.Load4((meshStart + meshIndex * 2) * 16 + 16);
        const uint meshVertexStart = meshMeta2.x;
        const uint meshVertexCount = meshMeta2.y;
        const uint meshWeightsStart = meshMeta2.z;
        const uint meshDst = meshMeta2.w;

        GroupMemoryBarrierWithGroupSync();
        for (uint i = threadId; i < meshBonesCount; i += THREAD_GROUP_SIZE)
        {
            uint boneOffset = _boneOffsets.Load(((meshBoneOffsetsStart + i) * 2) & 0xfffffffc);
            if ((i & 0x1) != 0)
                boneOffset = boneOffset >> 16;
            boneOffset = boneOffset & 0x7fff;

            gs_skeletonMats[i + skeletonCount] = mul3x4(gs_skeletonMats[boneOffset], _bindPoses[meshBindposesStart + i]);
        }
        GroupMemoryBarrierWithGroupSync();

        // Operation 0 - Copy to LBS matrices
        if (meshOperation & 0x1)
        {
            for (uint i = threadId; i < meshBonesCount; i += THREAD_GROUP_SIZE)
            {
                _dstMats[matsDst + i] = gs_skeletonMats[i + skeletonCount];
            }
        }

        // Operation 1 - Compute skinning from source mesh
        if (meshOperation & 0x2)
        {
            uint currentWeightBatchStart = meshWeightsStart;
            uint nextWeightBatchStart = meshWeightsStart;

            uint vertexIndexBase = 0;
            for (vertexIndexBase = 0; vertexIndexBase + 1023 < meshVertexCount; vertexIndexBase += 1024)
            {
                nextWeightBatchStart += _boneWeights.Load(currentWeightBatchStart * 8 + 4);
                currentWeightBatchStart++;

                [unroll]
                for (uint inner = 0; inner < THREAD_GROUP_DIVISOR; inner++)
                {
                    uint nextWeightIndex = currentWeightBatchStart + threadId + inner * THREAD_GROUP_SIZE;
                    bool isEnd = false;
                    float3x4 deform = 0;

                    do
                    {
                        uint2 temp = _boneWeights.Load2(nextWeightIndex * 8);
                        BoneWeight boneWeight = (BoneWeight)0;
                        boneWeight.weight = asfloat(temp.x);
                        boneWeight.packed = temp.y;
                        float weight = boneWeight.weight;
                        isEnd = weight < 0.;
                        weight = abs(weight);
                        uint boneIndex = boneWeight.packed & 0x7fff;
                        nextWeightIndex += boneWeight.packed >> 22;
                        nextWeightIndex++;
                    
                        float3x4 skinMatrix = gs_skeletonMats[boneIndex + skeletonCount];
                        //float3x4 skinMatrix = _skeletonMats[boneIndex + skeletonIndex];
                        deform += skinMatrix * weight;
                    } while (!isEnd);

                    Vertex dstVertex = (Vertex)0;
                    Vertex vertex = _srcVertices[meshVertexStart + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE];
                    dstVertex.position = mul(deform, float4(vertex.position, 1));
                    dstVertex.normal = mul(deform, float4(vertex.normal, 0));
                    dstVertex.tangent = mul(deform, float4(vertex.tangent, 0));
                    
                    _dstVertices[meshDst + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE] = dstVertex;
                    //_dstVertices[meshDst + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE] = vertex;
                }

                currentWeightBatchStart = nextWeightBatchStart;
            }

            currentWeightBatchStart++;
            [unroll]
            for (uint inner = 0; inner < THREAD_GROUP_DIVISOR; inner++)
            {
                if (vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE < meshVertexCount)
                {

                    uint nextWeightIndex = currentWeightBatchStart + threadId + inner * THREAD_GROUP_SIZE;
                    bool isEnd = false;
                    float3x4 deform = 0;

                    do
                    {
                        uint2 temp = _boneWeights.Load2(nextWeightIndex * 8);
                        BoneWeight boneWeight = (BoneWeight)0;
                        boneWeight.weight = asfloat(temp.x);
                        boneWeight.packed = temp.y;
                        float weight = boneWeight.weight;
                        isEnd = weight < 0.;
                        weight = abs(weight);
                        uint boneIndex = boneWeight.packed & 0x7fff;
                        nextWeightIndex += boneWeight.packed >> 22;
                        nextWeightIndex++;
                    
                        float3x4 skinMatrix = gs_skeletonMats[boneIndex + skeletonCount];
                        //float3x4 skinMatrix = _skeletonMats[boneIndex + skeletonIndex];
                        deform += skinMatrix * weight;
                    } while (!isEnd);

                    Vertex dstVertex = (Vertex)0;
                    Vertex vertex = _srcVertices[meshVertexStart + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE];
                    dstVertex.position = mul(deform, float4(vertex.position, 1));
                    dstVertex.normal = mul(deform, float4(vertex.normal, 0));
                    dstVertex.tangent = mul(deform, float4(vertex.tangent, 0));
                    
                    _dstVertices[meshDst + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE] = dstVertex;
                    //_dstVertices[meshDst + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE] = vertex;
                }
            }
        }

        // Operation 2 - Compute skinning from dst mesh
        if (meshOperation & 0x4)
        {
            uint currentWeightBatchStart = meshWeightsStart;
            uint nextWeightBatchStart = meshWeightsStart;

            uint vertexIndexBase = 0;
            for (vertexIndexBase = 0; vertexIndexBase + 1023 < meshVertexCount; vertexIndexBase += 1024)
            {
                nextWeightBatchStart += _boneWeights.Load(currentWeightBatchStart * 8 + 4);
                currentWeightBatchStart++;

                [unroll]
                for (uint inner = 0; inner < THREAD_GROUP_DIVISOR; inner++)
                {
                    uint nextWeightIndex = currentWeightBatchStart + threadId + inner * THREAD_GROUP_SIZE;
                    bool isEnd = false;
                    float3x4 deform = 0;

                    do
                    {
                        uint2 temp = _boneWeights.Load2(nextWeightIndex * 8);
                        BoneWeight boneWeight = (BoneWeight)0;
                        boneWeight.weight = asfloat(temp.x);
                        boneWeight.packed = temp.y;
                        float weight = boneWeight.weight;
                        isEnd = weight < 0.;
                        weight = abs(weight);
                        uint boneIndex = boneWeight.packed & 0x7fff;
                        nextWeightIndex += boneWeight.packed >> 22;
                        nextWeightIndex++;

                        float3x4 skinMatrix = gs_skeletonMats[boneIndex + skeletonCount];
                        //float3x4 skinMatrix = _skeletonMats[boneIndex + skeletonIndex];
                        deform += skinMatrix * weight;
                    } while (!isEnd);

                    Vertex dstVertex = (Vertex)0;
                    Vertex vertex = _dstVertices[meshDst + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE];
                    dstVertex.position = mul(deform, float4(vertex.position, 1));
                    dstVertex.normal = mul(deform, float4(vertex.normal, 0));
                    dstVertex.tangent = mul(deform, float4(vertex.tangent, 0));

                    _dstVertices[meshDst + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE] = dstVertex;
                }

                currentWeightBatchStart = nextWeightBatchStart;
            }

            currentWeightBatchStart++;
            [unroll]
            for (uint inner = 0; inner < THREAD_GROUP_DIVISOR; inner++)
            {
                if (vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE < meshVertexCount)
                {

                    uint nextWeightIndex = currentWeightBatchStart + threadId + inner * THREAD_GROUP_SIZE;
                    bool isEnd = false;
                    float3x4 deform = 0;

                    do
                    {
                        uint2 temp = _boneWeights.Load2(nextWeightIndex * 8);
                        BoneWeight boneWeight = (BoneWeight)0;
                        boneWeight.weight = asfloat(temp.x);
                        boneWeight.packed = temp.y;
                        float weight = boneWeight.weight;
                        isEnd = weight < 0.;
                        weight = abs(weight);
                        uint boneIndex = boneWeight.packed & 0x7fff;
                        nextWeightIndex += boneWeight.packed >> 22;
                        nextWeightIndex++;

                        float3x4 skinMatrix = gs_skeletonMats[boneIndex + skeletonCount];
                        //float3x4 skinMatrix = _skeletonMats[boneIndex + skeletonIndex];
                        deform += skinMatrix * weight;
                    } while (!isEnd);

                    Vertex dstVertex = (Vertex)0;
                    Vertex vertex = _dstVertices[meshDst + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE];
                    dstVertex.position = mul(deform, float4(vertex.position, 1));
                    dstVertex.normal = mul(deform, float4(vertex.normal, 0));
                    dstVertex.tangent = mul(deform, float4(vertex.tangent, 0));

                    _dstVertices[meshDst + vertexIndexBase + threadId + inner * THREAD_GROUP_SIZE] = dstVertex;
                }
            }
        }
    }
}
