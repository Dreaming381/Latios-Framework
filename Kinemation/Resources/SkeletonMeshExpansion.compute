// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SkeletonMeshExpansion

#define THREAD_GROUP_SIZE 64

static const uint kMeshOpMatsWithOffsets = 0;
static const uint kMeshOpMats = 1;
static const uint kMeshOpDqsWorldWithOffsets = 2;
static const uint kMeshOpDqsWorld = 3;

// Can be a float3x4, a QVVS, or a DQS
struct TransformUnion
{
    float4 a;
    float4 b;
    float4 c;
};

struct Qvvs
{
    float4 rotation;
    float4 position;
    float4 stretchScale;
};

// Dual Quaternion with Scale
struct Dqs
{
    float4 r; // real
    float4 d; // dual
    float4 scale;
};

uniform StructuredBuffer<TransformUnion> _bindPoses;
uniform StructuredBuffer<Qvvs> _skeletonQvvsTransforms;
uniform ByteAddressBuffer _boneOffsets;

// Stride of uint4
uniform ByteAddressBuffer _metaBuffer;

uniform RWByteAddressBuffer _dstTransforms : register(u1);

uint _startOffset;

void writeBone(uint absoluteBoneIndex, TransformUnion tu)
{
    _dstTransforms.Store4(absoluteBoneIndex * 48, asuint(tu.a));
    _dstTransforms.Store4(absoluteBoneIndex * 48 + 16, asuint(tu.b));
    _dstTransforms.Store4(absoluteBoneIndex * 48 + 32, asuint(tu.c));
}

void fromQuaternion(float4 v, out float3 c0, out float3 c1, out float3 c2)
{
    float4 v2 = v + v;

    uint3 npn = uint3(0x80000000, 0x00000000, 0x80000000);
    uint3 nnp = uint3(0x80000000, 0x80000000, 0x00000000);
    uint3 pnn = uint3(0x00000000, 0x80000000, 0x80000000);
    c0 = v2.y * asfloat(asuint(v.yxw) ^ npn) - v2.z * asfloat(asuint(v.zwx) ^ pnn) + float3(1, 0, 0);
    c1 = v2.z * asfloat(asuint(v.wzy) ^ nnp) - v2.x * asfloat(asuint(v.yxw) ^ npn) + float3(0, 1, 0);
    c2 = v2.x * asfloat(asuint(v.zwx) ^ pnn) - v2.y * asfloat(asuint(v.wzy) ^ nnp) + float3(0, 0, 1);
}

float4 mulQuatQuat(float4 a, float4 b)
{
    return float4(a.wwww * b + (a.xyzx * b.wwwx + a.yzxy * b.zxyy) * float4(1, 1, 1, -1) - a.zxyz * b.yzxz);
}

float3x4 qvvsToMatrix(Qvvs qvvs)
{
    float3 scale = qvvs.stretchScale.xyz * qvvs.stretchScale.w;
    float3 c0 = 0;
    float3 c1 = 0;
    float3 c2 = 0;
    fromQuaternion(qvvs.rotation, c0, c1, c2);
    c0 *= scale.x;
    c1 *= scale.y;
    c2 *= scale.z;
    return float3x4(
        c0.x, c1.x, c2.x, qvvs.position.x,
        c0.y, c1.y, c2.y, qvvs.position.y,
        c0.z, c1.z, c2.z, qvvs.position.z
        );
}

TransformUnion matrixToTransformUnionMatrix(float3x4 mat)
{
    TransformUnion result = (TransformUnion)0;
    result.a = mat._m00_m10_m20_m01;
    result.b = mat._m11_m21_m02_m12;
    result.c = mat._m22_m03_m13_m23;
    return result;
}

float3x4 transformUnionMatrixToMatrix(TransformUnion transform)
{
    return float3x4(
        transform.a.x, transform.a.w, transform.b.z, transform.c.y,
        transform.a.y, transform.b.x, transform.b.w, transform.c.z,
        transform.a.z, transform.b.y, transform.c.x, transform.c.w
        );
}

Dqs qvvsToDqs(Qvvs qvvs)
{
    Dqs result = (Dqs)0;
    result.r = qvvs.rotation;
    result.d = 0.5 * mulQuatQuat(float4(qvvs.position.xyz, 0), qvvs.rotation);
    result.scale.xyz = qvvs.stretchScale.xyz * qvvs.stretchScale.w;
    return result;
}

TransformUnion dqsToTransformUnionDqs(Dqs dqs)
{
    TransformUnion result = (TransformUnion)0;
    result.a = dqs.r;
    result.b = dqs.d;
    result.c = float4(dqs.scale.xyz, 0);
    return result;
}

Dqs transformUnionDqsToDqs(TransformUnion transform)
{
    Dqs result = (Dqs)0;
    result.r = transform.a;
    result.d = transform.b;
    result.scale.xyz = transform.c.xyz;
    return result;
}

TransformUnion qvvsToTransformUnionQvvs(Qvvs qvvs)
{
    TransformUnion result = (TransformUnion)0;
    result.a = qvvs.rotation;
    result.b.xyz = qvvs.position.xyz;
    result.c = qvvs.stretchScale;
    return result;
}

Qvvs transformUnionQvvsToQvvs(TransformUnion transform)
{
    Qvvs result = (Qvvs)0;
    result.rotation = transform.a;
    result.position.xyz = transform.b.xyz;
    result.stretchScale = transform.c;
    return result;
}

float3x4 mul3x4(float3x4 a, float3x4 b)
{
    float4x4 x = 0.;
    x._m00 = a._m00;
    x._m10 = a._m10;
    x._m20 = a._m20;
    x._m30 = 0.;
    x._m01 = a._m01;
    x._m11 = a._m11;
    x._m21 = a._m21;
    x._m31 = 0.;
    x._m02 = a._m02;
    x._m12 = a._m12;
    x._m22 = a._m22;
    x._m32 = 0.;
    x._m03 = a._m03;
    x._m13 = a._m13;
    x._m23 = a._m23;
    x._m33 = 1.;

    float4x4 y = 0.;
    y._m00 = b._m00;
    y._m10 = b._m10;
    y._m20 = b._m20;
    y._m30 = 0.;
    y._m01 = b._m01;
    y._m11 = b._m11;
    y._m21 = b._m21;
    y._m31 = 0.;
    y._m02 = b._m02;
    y._m12 = b._m12;
    y._m22 = b._m22;
    y._m32 = 0.;
    y._m03 = b._m03;
    y._m13 = b._m13;
    y._m23 = b._m23;
    y._m33 = 1.;

    float4x4 r = mul(x, y);

    float3x4 result = 0.;
    result._m00 = r._m00;
    result._m10 = r._m10;
    result._m20 = r._m20;

    result._m01 = r._m01;
    result._m11 = r._m11;
    result._m21 = r._m21;

    result._m02 = r._m02;
    result._m12 = r._m12;
    result._m22 = r._m22;

    result._m03 = r._m03;
    result._m13 = r._m13;
    result._m23 = r._m23;

    return result;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SkeletonMeshExpansion(uint threadId : SV_GroupIndex, uint3 groupIds : SV_GroupID)
{
    const uint groupId = groupIds.x;
    const uint4 skeletonCommands = _metaBuffer.Load4((groupId + _startOffset) * 16);

    const uint skeletonCount = skeletonCommands.x & 0xffff;
    //const uint skeletonOperation = skeletonCommands.x >> 16;
    const uint skeletonTransformStartIndex = skeletonCommands.y;
    const uint meshCommandsStartIndex = skeletonCommands.z;
    const uint meshCommandsCount = skeletonCommands.w;

    for (uint meshCommandIter = 0; meshCommandIter < meshCommandsCount; meshCommandIter++)
    {
        const uint4 meshCommand = _metaBuffer.Load4((meshCommandsStartIndex + meshCommandIter) * 16);
        const uint meshBonesCount = meshCommand.x & 0xffff;
        const uint meshOperation = meshCommand.x >> 16;
        const uint meshBindposesStart = meshCommand.y;
        const uint meshBoneOffsetsStart = meshCommand.z;
        const uint dstStart = meshCommand.w;

        if (meshOperation == kMeshOpMatsWithOffsets)
        {
            for (uint i = threadId; i < meshBonesCount; i += THREAD_GROUP_SIZE)
            {
                uint boneOffset = _boneOffsets.Load(((meshBoneOffsetsStart + i) * 2) & 0xfffffffc);
                if ((i & 0x1) != 0)
                    boneOffset = boneOffset >> 16;
                boneOffset = boneOffset & 0x7fff;

                float3x4 bindpose = transformUnionMatrixToMatrix(_bindPoses[meshBindposesStart + i]);
                Qvvs boneQvvs = _skeletonQvvsTransforms[skeletonTransformStartIndex + boneOffset];
                float3x4 boneMat = qvvsToMatrix(boneQvvs);
                float3x4 mat = mul3x4(boneMat, bindpose);
                writeBone(dstStart + i, matrixToTransformUnionMatrix(mat));
            }
        }
        else if (meshOperation == kMeshOpMats)
        {
            for (uint i = threadId; i < meshBonesCount; i += THREAD_GROUP_SIZE)
            {
                float3x4 bindpose = transformUnionMatrixToMatrix(_bindPoses[meshBindposesStart + i]);
                Qvvs boneQvvs = _skeletonQvvsTransforms[skeletonTransformStartIndex + i];
                float3x4 boneMat = qvvsToMatrix(boneQvvs);
                float3x4 mat = mul3x4(boneMat, bindpose);
                writeBone(dstStart + i, matrixToTransformUnionMatrix(mat));
            }
        }
        else if (meshOperation == kMeshOpDqsWorldWithOffsets)
        {
            for (uint i = threadId; i < meshBonesCount; i += THREAD_GROUP_SIZE)
            {
                uint boneOffset = _boneOffsets.Load(((meshBoneOffsetsStart + i) * 2) & 0xfffffffc);
                if ((i & 0x1) != 0)
                    boneOffset = boneOffset >> 16;
                boneOffset = boneOffset & 0x7fff;

                Qvvs boneQvvs = _skeletonQvvsTransforms[skeletonTransformStartIndex + boneOffset];
                Dqs boneDqs = qvvsToDqs(boneQvvs);
                writeBone(dstStart + i, dqsToTransformUnionDqs(boneDqs));
            }
        }
        else if (meshOperation == kMeshOpDqsWorld)
        {
            for (uint i = threadId; i < meshBonesCount; i += THREAD_GROUP_SIZE)
            {
                Qvvs boneQvvs = _skeletonQvvsTransforms[skeletonTransformStartIndex + i];
                Dqs boneDqs = qvvsToDqs(boneQvvs);
                writeBone(dstStart + i, dqsToTransformUnionDqs(boneDqs));
            }
        }
    }
}
