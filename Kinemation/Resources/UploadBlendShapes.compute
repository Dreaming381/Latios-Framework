// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UploadBlendShapes

struct BlendShapeVertexDelta
{
    uint index;
    float3 position;
    float3 normal;
    float3 tangent;
};
uniform StructuredBuffer<BlendShapeVertexDelta> _src;
uniform RWStructuredBuffer<BlendShapeVertexDelta> _dst;

uniform ByteAddressBuffer _meta;

uint _startOffset;

[numthreads(64, 1, 1)]
void UploadBlendShapes(uint threadId : SV_GroupIndex, uint3 groupIds : SV_GroupID)
{
    uint3 m = _meta.Load3((groupIds.x + _startOffset) * 12);

    uint srcBase = m.x;
    uint dstBase = m.y;
    uint elementCount = m.z;

    uint i = 0;
    for (i = 0; i + 64 < elementCount; i += 64)
    {
        _dst[dstBase + i + threadId] = _src[srcBase + i + threadId];
    }

    if (i + threadId < elementCount)
        _dst[dstBase + i + threadId] = _src[srcBase + i + threadId];
}
